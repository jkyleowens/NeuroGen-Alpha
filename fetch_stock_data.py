import yfinance as yf
import pandas as pd
import pandas_ta as ta
import random
from pathlib import Path
import time

# Define a list of stock tickers from various sectors for diverse data
STOCK_TICKERS = [
    "AAPL", "MSFT", "GOOGL", "AMZN", "NVDA", "TSLA", "JPM", "JNJ", "V",
    "PG", "UNH", "HD", "MA", "BAC", "DIS", "ADBE", "PYPL", "NFLX", "CRM",
    "INTC", "CSCO", "PFE", "MRK", "PEP", "KO", "XOM", "CVX", "WMT", "MCD"
]

# Define the data directory where CSV files will be saved
DATA_DIR = Path("stock_data_csv")
DATA_DIR.mkdir(parents=True, exist_ok=True)

def fetch_and_process_stock_data(ticker, period="5y", interval="1d"):
    """
    Fetches historical stock data, calculates technical indicators,
    formats it, and saves it to a CSV file compatible with the simulation.
    """
    try:
        print(f"Fetching data for {ticker}...")
        # Download historical data from Yahoo Finance
        stock_data = yf.download(ticker, period=period, interval=interval, progress=False)

        if stock_data.empty:
            print(f"No data found for {ticker}. Skipping.")
            return None

        # --- BUG FIX: Handle MultiIndex columns from yfinance ---
        # If yfinance returns a MultiIndex, flatten it to a standard Index.
        # This converts columns from ('Open', 'NVDA') to 'Open'.
        if isinstance(stock_data.columns, pd.MultiIndex):
            stock_data.columns = stock_data.columns.get_level_values(0)

        # --- Data Processing ---
        print(f"[{ticker}] Calculating technical indicators...")
        
        # Use the ta library to apply a common set of technical indicators
        stock_data.ta.strategy(ta.CommonStrategy)

        # Drop rows with NaN values generated by TA calculations
        stock_data.dropna(inplace=True)
        
        print(f"[{ticker}] Shape after TA and dropna(): {stock_data.shape}")

        if stock_data.empty:
            print(f"Data for {ticker} became empty after TA calculation. Skipping.")
            return None

        # --- Formatting for Simulation ---
        
        # Sanitize all column names. This .str accessor now works correctly
        # on the flattened Index.
        stock_data.columns = stock_data.columns.str.replace('[^A-Za-z0-9_]+', '', regex=True)

        # CRITICAL STEP: Ensure required columns exist for the C++ simulation.
        required_cols = ['Open', 'High', 'Low', 'Close', 'Volume']
        if not all(col in stock_data.columns for col in required_cols):
             print(f"Error: One of the required columns {required_cols} is missing after processing.")
             print(f"Available columns: {stock_data.columns.tolist()}")
             return None

        # Define a unique filename with ticker, interval, and timestamp
        timestamp = time.strftime('%Y%m%d%H%M%S')
        filename = DATA_DIR / f"{ticker}_{interval}_{timestamp}.csv"
        
        # Save the processed data to a CSV file
        stock_data.to_csv(filename)
        print(f"Data for {ticker} saved to {filename}")
        
        return filename

    except Exception as e:
        print(f"An error occurred while processing {ticker}: {e}")
        return None

def main(num_stocks_to_fetch=10):
    """
    Main function to fetch and process data for a random selection of stocks.
    """
    if not STOCK_TICKERS:
        print("Stock ticker list is empty. Please define STOCK_TICKERS.")
        return

    # Randomly sample from the main list to get varied data each time
    selected_tickers = random.sample(STOCK_TICKERS, min(num_stocks_to_fetch, len(STOCK_TICKERS)))
    
    print(f"\nSelected {len(selected_tickers)} tickers for fetching: {selected_tickers}\n")
    
    successful_fetches = 0
    for ticker in selected_tickers:
        if fetch_and_process_stock_data(ticker):
            successful_fetches += 1
        print("-" * 30)
    
    print("\nData fetching and processing complete.")
    print(f"Successfully processed {successful_fetches}/{len(selected_tickers)} tickers.")
    print(f"CSV files are saved in the '{DATA_DIR}' directory.")

if __name__ == "__main__":
    # You can change the number to fetch more or fewer files at once
    main(num_stocks_to_fetch=10)