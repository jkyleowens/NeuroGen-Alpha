# CPU-Only Makefile for NeuroGen Alpha (No CUDA Required)
# Use this when CUDA toolkit is not available

# Standard C++ compiler
CXX := g++

# Include directories (no CUDA)
INCLUDE_DIRS := -I./include -I./include/NeuroGen

# Compilation flags
CXXFLAGS := -std=c++17 -O2 $(INCLUDE_DIRS) -DUSE_CUDA=0 -Wall -Wextra

# Directory structure
SRC_DIR := src
OBJ_DIR := obj
BIN_DIR := bin
INCLUDE_DIR := include

# Make sure the directories exist
$(shell mkdir -p $(OBJ_DIR))
$(shell mkdir -p $(BIN_DIR))
$(shell mkdir -p $(INCLUDE_DIR)/NeuroGen)

# CPU source files (exclude CUDA files)
CPP_SRCS := $(filter-out $(SRC_DIR)/cuda/%, $(wildcard $(SRC_DIR)/*.cpp))
MAIN_SRCS := main.cpp Network.cpp Neuron.cpp NetworkCPU.cpp cpu_network_wrapper.cpp

# Object files
CPP_OBJS := $(patsubst $(SRC_DIR)/%.cpp,$(OBJ_DIR)/%.o,$(CPP_SRCS))
MAIN_OBJS := $(patsubst %.cpp,$(OBJ_DIR)/%.o,$(MAIN_SRCS))

# Target binary
TARGET := $(BIN_DIR)/neural_sim_cpu

# Main targets
.PHONY: all clean test setup headers info

all: setup headers $(TARGET)

# Setup directory structure
setup:
	@mkdir -p $(INCLUDE_DIR)/NeuroGen
	@echo "Directory structure created"

# Copy non-CUDA headers
headers:
	@echo "Setting up header files..."
	@if [ -f "src/NetworkConfig.h" ]; then cp src/NetworkConfig.h $(INCLUDE_DIR)/NeuroGen/; fi
	@echo "Headers copied to include directory"

# Link all object files
$(TARGET): $(MAIN_OBJS) $(CPP_OBJS)
	@mkdir -p $(BIN_DIR)
	$(CXX) $(CXXFLAGS) -o $@ $^
	@echo "CPU build complete: $@"

# Compile C++ sources
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.cpp
	@mkdir -p $(OBJ_DIR)
	$(CXX) $(CXXFLAGS) -c $< -o $@

# Compile main sources
$(OBJ_DIR)/%.o: %.cpp
	@mkdir -p $(OBJ_DIR)
	$(CXX) $(CXXFLAGS) -c $< -o $@

# Test compilation (syntax check)
test-syntax:
	@echo "Testing C++ syntax compilation..."
	@$(CXX) $(CXXFLAGS) -fsyntax-only main.cpp Network.cpp Neuron.cpp 2>/dev/null && echo "✅ Main files syntax OK" || echo "❌ Syntax errors in main files"
	@$(CXX) $(CXXFLAGS) -fsyntax-only $(SRC_DIR)/*.cpp 2>/dev/null && echo "✅ Source files syntax OK" || echo "❌ Syntax errors in source files"

# Clean
clean:
	rm -rf $(OBJ_DIR)/*
	rm -rf $(INCLUDE_DIR)/*
	rm -f $(TARGET)
	@echo "Clean complete"

# Print info for debugging
info:
	@echo "CXX: $(CXX)"
	@echo "INCLUDE_DIRS: $(INCLUDE_DIRS)"
	@echo "C++ sources: $(CPP_SRCS)"
	@echo "Main sources: $(MAIN_SRCS)"
	@echo "Objects: $(CPP_OBJS) $(MAIN_OBJS)"
	@echo "Target: $(TARGET)"

# Check available files
check-files:
	@echo "Available source files:"
	@ls -la *.cpp 2>/dev/null || echo "No .cpp files in root"
	@echo "Available in src/:"
	@ls -la src/*.cpp 2>/dev/null || echo "No .cpp files in src/"
	@echo "Available headers:"
	@find . -name "*.h" | head -10
